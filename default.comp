#version 460 core
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform image2D screen;

uniform double scale;
uniform dvec2 position;


//dvec2 mandelIterate(dvec2 num, dvec2 c) {
//    double real;
//    double imag;
//    real = num.x * num.x - num.y * num.y + c.x;
//    imag = 2 * num.x * num.y + c.y;
//    return dvec2(real, imag);
//}

//double magnitude(dvec2 complex) {
//    return sqrt(complex.x * complex.x + complex.y * complex.y);
//}

void main() {
	//gl_NumWorkGroups
	//gl_WorkGroupID
	//gl_LocalInvocationID
	//
	//gl_GlobalInvocationID
	//gl_LocalInvocationIndex
    //
    //gl_WorkGroupSize

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y + 4); // What is up with this?

    double x = ((2.0 * gl_GlobalInvocationID.x) / (gl_WorkGroupSize.x * gl_NumWorkGroups.x) - 1.0) / scale - position.x;
	double y = (1.0 - (2.0 * gl_GlobalInvocationID.y) / (gl_WorkGroupSize.y * gl_NumWorkGroups.y)) / scale - position.y;

	dvec2 point_coords = dvec2(x, y);

    dvec2 mandelNum = dvec2(0.0f, 0.0f);
    int sample_number = 50;
    int i = 0;

    while (i <= sample_number) {
        //mandelNum = mandelIterate(mandelNum, point_coords);
        mandelNum = dvec2(mandelNum.x * mandelNum.x - mandelNum.y * mandelNum.y + point_coords.x, 
            2 * mandelNum.x * mandelNum.y + point_coords.y);
        if (sqrt(mandelNum.x * mandelNum.x + mandelNum.y * mandelNum.y) > 2.0f) {
            break;
        }
        i++;
    }

    float color;
    if (i != sample_number + 1) {
        color = (1.0f * (sample_number - i * 0.9)) / sample_number; 
    } else {
        color = 0.0f;
    }
    

	vec4 pixel = vec4(vec3(color), 1.0f);

	imageStore(screen, pixel_coords, pixel);
}

